# Generated by Django 5.1.6 on 2025-06-04 00:35

import django.db.models.deletion
import django.utils.timezone
import website.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('communications', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('program_type', models.CharField(choices=[('toddler', 'Toddler Program'), ('primary', 'Primary Program'), ('elementary', 'Elementary Program')], max_length=20)),
                ('age_range', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='academics/programs/')),
                ('features', models.JSONField(default=list, help_text='List of program features')),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Academic Program',
                'verbose_name_plural': 'Academic Programs',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='AdmissionsInquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('child_name', models.CharField(max_length=100)),
                ('child_age', models.IntegerField()),
                ('program_interest', models.CharField(choices=[('toddler', 'Toddler Program (18 months - 3 years)'), ('primary', 'Primary Program (3 - 6 years)'), ('elementary', 'Elementary Program (6 - 12 years)')], max_length=20)),
                ('start_date', models.DateField()),
                ('message', models.TextField(blank=True)),
                ('date_submitted', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='new', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'Admissions Inquiries',
                'ordering': ['-date_submitted'],
            },
        ),
        migrations.CreateModel(
            name='AnnouncementCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Announcement Category',
                'verbose_name_plural': 'Announcement Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(choices=[('clipboard-check', 'Observation'), ('comments', 'Communication'), ('book-reader', 'Portfolio'), ('chart-line', 'Progress')], max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Assessment Method',
                'verbose_name_plural': 'Assessment Methods',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('date_sent', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-date_sent'],
            },
        ),
        migrations.CreateModel(
            name='CurriculumApproach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Curriculum Approach Item',
                'verbose_name_plural': 'Curriculum Approach Items',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Event Categories',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='EventPageContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(choices=[('hero', 'Hero Section'), ('newsletter', 'Newsletter Section'), ('cta', 'Call to Action Section')], max_length=50, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('subtitle', models.TextField(blank=True)),
                ('background_image', models.ImageField(blank=True, help_text='Background image for hero section', null=True, upload_to='events/sections/')),
                ('calendar_placeholder_image', models.ImageField(blank=True, help_text='Placeholder image for the calendar widget', null=True, upload_to='events/sections/')),
                ('content', models.TextField(blank=True)),
                ('button_text', models.CharField(blank=True, max_length=50)),
                ('button_link', models.CharField(blank=True, max_length=200)),
                ('additional_button_text', models.CharField(blank=True, max_length=50)),
                ('additional_button_link', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Event Page Section',
                'verbose_name_plural': 'Event Page Sections',
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.CharField(choices=[('home', 'Home Page'), ('about', 'About Us'), ('academics', 'Academics'), ('admissions', 'Admissions'), ('events', 'Events'), ('news', 'News'), ('contact', 'Contact')], max_length=20)),
                ('question', models.CharField(max_length=255)),
                ('answer', models.TextField()),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'FAQ',
                'verbose_name_plural': 'FAQs',
                'ordering': ['page', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(upload_to='gallery/')),
                ('category', models.CharField(choices=[('classroom', 'Classroom'), ('events', 'Events'), ('activities', 'Activities'), ('campus', 'Campus')], max_length=50)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('is_featured', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Galleries',
                'ordering': ['-date_added'],
            },
        ),
        migrations.CreateModel(
            name='HeroSlide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('subtitle', models.TextField(blank=True)),
                ('image', models.ImageField(upload_to='hero_slides/')),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='JobPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('department', models.CharField(choices=[('teaching', 'Teaching Staff'), ('administration', 'Administration'), ('support', 'Support Staff'), ('management', 'Management'), ('other', 'Other')], max_length=20)),
                ('job_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('temporary', 'Temporary'), ('internship', 'Internship')], max_length=20)),
                ('location', models.CharField(default='On-site', max_length=100)),
                ('description', models.TextField()),
                ('responsibilities', models.TextField()),
                ('qualifications', models.TextField()),
                ('salary_range', models.CharField(blank=True, max_length=100)),
                ('application_deadline', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('date_posted', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Job Position',
                'verbose_name_plural': 'Job Positions',
                'ordering': ['-date_posted'],
            },
        ),
        migrations.CreateModel(
            name='MontessoriMethodItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(choices=[('child', 'Child (Child-Centered Learning)'), ('hands-helping', 'Hands Helping (Prepared Environment)'), ('brain', 'Brain (Hands-on Learning)'), ('users', 'Users (Mixed-Age Groups)'), ('star', 'Star'), ('heart', 'Heart'), ('lightbulb', 'Lightbulb'), ('book', 'Book'), ('graduation-cap', 'Graduation Cap'), ('seedling', 'Seedling')], max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Montessori Method Item',
                'verbose_name_plural': 'Montessori Method Items',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='NewsletterSubscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('date_subscribed', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Newsletter Subscriber',
                'verbose_name_plural': 'Newsletter Subscribers',
                'ordering': ['-date_subscribed'],
            },
        ),
        migrations.CreateModel(
            name='PastEventHighlight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='events/highlights/')),
                ('date', models.DateField()),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-date', 'order'],
            },
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_logo', models.ImageField(help_text='Main school logo displayed in the header', upload_to='site/')),
                ('footer_logo', models.ImageField(blank=True, help_text='Optional different logo for footer', null=True, upload_to='site/')),
                ('contact_email', models.EmailField(help_text='Main contact email address', max_length=254)),
                ('admissions_email', models.EmailField(blank=True, help_text='Email for admissions inquiries', max_length=254)),
                ('support_email', models.EmailField(blank=True, help_text='Email for technical support', max_length=254)),
                ('contact_phone', models.CharField(help_text='Main contact phone number', max_length=20)),
                ('admissions_phone', models.CharField(blank=True, help_text='Phone for admissions inquiries', max_length=20)),
                ('fax_number', models.CharField(blank=True, help_text='Fax number if available', max_length=20)),
                ('address', models.TextField(help_text="School's physical address")),
                ('office_hours', models.CharField(default='Mon-Fri: 8:00 AM - 4:00 PM', help_text='Office hours', max_length=100)),
                ('google_maps_api_key', models.CharField(blank=True, help_text='Google Maps API key for map integration', max_length=255)),
                ('google_maps_latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Latitude coordinate for Google Maps', max_digits=10, null=True)),
                ('google_maps_longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Longitude coordinate for Google Maps', max_digits=10, null=True)),
                ('google_maps_zoom', models.PositiveSmallIntegerField(default=15, help_text='Zoom level for Google Maps (1-20)')),
                ('facebook_url', models.URLField(blank=True, help_text='Facebook page URL')),
                ('twitter_url', models.URLField(blank=True, help_text='Twitter profile URL')),
                ('instagram_url', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('linkedin_url', models.URLField(blank=True, help_text='LinkedIn profile URL')),
                ('youtube_url', models.URLField(blank=True, help_text='YouTube channel URL')),
            ],
            options={
                'verbose_name': 'Site Settings',
                'verbose_name_plural': 'Site Settings',
            },
        ),
        migrations.CreateModel(
            name='SpecialProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(choices=[('music', 'Music'), ('palette', 'Art'), ('seedling', 'Garden'), ('globe', 'Cultural'), ('microscope', 'Science'), ('book', 'Language'), ('robot', 'Technology'), ('heart', 'Social-Emotional')], max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Special Program',
                'verbose_name_plural': 'Special Programs',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=100)),
                ('staff_type', models.CharField(choices=[('executive', 'Executive Staff'), ('teaching', 'Teaching Staff'), ('support', 'Support Staff')], max_length=20)),
                ('executive_position', models.CharField(blank=True, choices=[('director', 'School Director'), ('headteacher', 'Head Teacher'), ('administrator', 'Administrator'), ('supervisor', 'Supervisor'), ('coordinator', 'Coordinator'), ('other', 'Other Executive')], help_text='Only applicable for Executive Staff', max_length=20, null=True)),
                ('bio', models.TextField()),
                ('image', models.ImageField(upload_to='staff/')),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, help_text='Optional contact number', max_length=20)),
                ('qualification', models.TextField(blank=True, help_text='Academic and professional qualifications')),
                ('achievements', models.TextField(blank=True, help_text='Notable achievements and contributions')),
                ('interests', models.TextField(blank=True, help_text='Professional interests and specializations')),
                ('is_featured', models.BooleanField(default=False, help_text='Featured staff will be shown on the home and about pages')),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['staff_type', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('role', models.CharField(help_text='e.g., Parent, Student, Alumni', max_length=100)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='testimonials/')),
                ('is_featured', models.BooleanField(default=False)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-date_added'],
            },
        ),
        migrations.CreateModel(
            name='TourLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='tour_locations/')),
                ('video_url', models.URLField(blank=True, help_text='URL to a video tour (e.g., YouTube)')),
                ('order', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='announcements/')),
                ('date_posted', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_featured', models.BooleanField(default=False)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='announcements', to='website.announcementcategory')),
            ],
            options={
                'ordering': ['-date_posted'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('date', models.DateTimeField()),
                ('location', models.CharField(max_length=200)),
                ('image', models.ImageField(blank=True, null=True, upload_to='events/')),
                ('registration_required', models.BooleanField(default=False)),
                ('registration_link', models.URLField(blank=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('management_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='website_event', to='communications.event')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='website.eventcategory')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('cover_letter', models.TextField()),
                ('resume', models.FileField(upload_to='applications/resumes/')),
                ('additional_document', models.FileField(blank=True, null=True, upload_to='applications/documents/')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('reviewing', 'Under Review'), ('interview', 'Selected for Interview'), ('rejected', 'Application Rejected'), ('hired', 'Hired')], default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('admin_feedback', models.TextField(blank=True, help_text='Feedback to be sent to the applicant')),
                ('date_applied', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_reviewed', models.DateTimeField(blank=True, null=True)),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='website.jobposition')),
            ],
            options={
                'verbose_name': 'Job Application',
                'verbose_name_plural': 'Job Applications',
                'ordering': ['-date_applied'],
            },
        ),
        migrations.CreateModel(
            name='PageContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.CharField(choices=[('home', 'Home Page'), ('about', 'About Us'), ('academics', 'Academics'), ('admissions', 'Admissions'), ('events', 'Events'), ('news', 'News & Announcements'), ('contact', 'Contact Us'), ('staff', 'Our Staff'), ('career', 'Careers'), ('calendar', 'School Calendar'), ('privacy', 'Privacy Policy'), ('terms', 'Terms of Service'), ('faq', 'FAQs')], max_length=20)),
                ('section', models.CharField(choices=[('hero', 'Hero Section'), ('about_preview', 'About Preview'), ('featured_programs', 'Featured Programs'), ('why_choose_us', 'Why Choose Us'), ('about_hero', 'About Hero Section'), ('mission', 'Mission Statement'), ('vision', 'Vision Statement'), ('story', 'Our Story'), ('montessori_method', 'Montessori Method'), ('values', 'Our Values'), ('academics_hero', 'Academics Hero Section'), ('curriculum_image', 'Curriculum Approach Image'), ('assessment_intro', 'Assessment Introduction'), ('cta_section', 'Academics Call to Action'), ('admission_process', 'Admission Process'), ('requirements', 'Requirements'), ('fees', 'Fees and Tuition'), ('scholarships', 'Scholarships'), ('events_hero', 'Events Hero Section'), ('events_newsletter', 'Events Newsletter Section'), ('events_cta', 'Events Call to Action'), ('events_calendar', 'Events Calendar Placeholder'), ('news_hero', 'News Hero Section'), ('contact_hero', 'Contact Hero Section'), ('staff_hero', 'Staff Hero Section'), ('career_hero', 'Career Hero Section'), ('career_intro', 'Career Introduction'), ('calendar_hero', 'Calendar Hero Section'), ('calendar_content', 'Calendar Content'), ('privacy_hero', 'Privacy Policy Hero Section'), ('privacy_content', 'Privacy Policy Content'), ('terms_hero', 'Terms of Service Hero Section'), ('terms_content', 'Terms of Service Content'), ('faq_hero', 'FAQ Hero Section')], max_length=50)),
                ('title', models.CharField(help_text='Title for this section', max_length=200)),
                ('content', models.TextField(blank=True, help_text='Main content text for this section')),
                ('image', models.ImageField(blank=True, help_text='Image for this section.', null=True, upload_to=website.models.PageContent.get_upload_path)),
                ('calendar_placeholder_image', models.ImageField(blank=True, help_text='Placeholder image for the calendar widget', null=True, upload_to='page_content/')),
                ('button_text', models.CharField(blank=True, max_length=50, null=True)),
                ('button_link', models.CharField(blank=True, max_length=200, null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in which this section appears on the page')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Page Content',
                'verbose_name_plural': 'Page Contents',
                'ordering': ['page', 'order'],
                'unique_together': {('page', 'section')},
            },
        ),
        migrations.CreateModel(
            name='TourImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='tour_images/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('order', models.IntegerField(default=0)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='website.tourlocation')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
    ]
