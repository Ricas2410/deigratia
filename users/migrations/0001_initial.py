# Generated by Django 5.1.6 on 2025-06-04 00:35

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('courses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdmissionLetterTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('header_text', models.CharField(default='Admission Letter', max_length=255)),
                ('body_template', models.TextField(help_text='Use placeholders like {student_name}, {grade}, etc.')),
                ('footer_text', models.TextField(blank=True, null=True)),
                ('signature_image', models.ImageField(blank=True, null=True, upload_to='signatures/')),
                ('signatory_name', models.CharField(blank=True, max_length=100, null=True)),
                ('signatory_position', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Admission Letter Template',
                'verbose_name_plural': 'Admission Letter Templates',
            },
        ),
        migrations.CreateModel(
            name='IDCardTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('role', models.CharField(choices=[('STUDENT', 'Student'), ('TEACHER', 'Teacher'), ('PARENT', 'Parent'), ('ADMIN', 'Admin')], max_length=10)),
                ('background_image', models.ImageField(blank=True, null=True, upload_to='id_card_templates/')),
                ('header_text', models.CharField(default='School ID Card', max_length=255)),
                ('card_width', models.PositiveIntegerField(default=1013)),
                ('card_height', models.PositiveIntegerField(default=638)),
                ('text_color', models.CharField(default='#000000', max_length=20)),
                ('background_color', models.CharField(default='#FFFFFF', max_length=20)),
                ('header_color', models.CharField(default='#4e73df', max_length=20)),
                ('footer_color', models.CharField(default='#f8f9fc', max_length=20)),
                ('use_curved_design', models.BooleanField(default=False)),
                ('footer_text', models.TextField(blank=True, help_text='Custom text for card footer. Use {school_name}, {school_address}, {school_phone} as placeholders.', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'ID Card Template',
                'verbose_name_plural': 'ID Card Templates',
            },
        ),
        migrations.CreateModel(
            name='SchoolSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(default='Ricas School Management System', max_length=255)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='school_logo/')),
                ('address', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('principal_name', models.CharField(blank=True, max_length=100, null=True)),
                ('academic_year', models.CharField(blank=True, max_length=20, null=True)),
                ('smtp_host', models.CharField(blank=True, max_length=255, null=True)),
                ('smtp_port', models.PositiveIntegerField(blank=True, null=True)),
                ('smtp_username', models.CharField(blank=True, max_length=255, null=True)),
                ('smtp_password', models.CharField(blank=True, max_length=255, null=True)),
                ('smtp_use_tls', models.BooleanField(default=True)),
                ('notify_assignments', models.BooleanField(default=True)),
                ('notify_grades', models.BooleanField(default=True)),
                ('notify_attendance', models.BooleanField(default=True)),
                ('notify_events', models.BooleanField(default=True)),
                ('enable_messaging', models.BooleanField(default=True, help_text='Enable messaging system across the platform')),
                ('enable_student_to_student_chat', models.BooleanField(default=True, help_text='Allow students to message other students in their class')),
                ('primary_color', models.CharField(default='#4e73df', max_length=20)),
                ('dark_mode', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'School Settings',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('TEACHER', 'Teacher'), ('STUDENT', 'Student'), ('PARENT', 'Parent'), ('ACCOUNTANT', 'Accountant'), ('SECRETARY', 'Secretary'), ('RECEPTIONIST', 'Receptionist'), ('SECURITY', 'Security'), ('JANITOR', 'Janitor'), ('COOK', 'Cook'), ('CLEANER', 'Cleaner'), ('STAFF', 'Other Staff')], default='STUDENT', max_length=15)),
                ('is_verified', models.BooleanField(default=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IDCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_number', models.CharField(max_length=50, unique=True)),
                ('issue_date', models.DateField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('barcode_data', models.CharField(blank=True, max_length=255, null=True)),
                ('additional_info', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='id_cards', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.idcardtemplate')),
            ],
            options={
                'verbose_name': 'ID Card',
                'verbose_name_plural': 'ID Cards',
            },
        ),
        migrations.CreateModel(
            name='StaffMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('staff_type', models.CharField(choices=[('ADMINISTRATIVE', 'Administrative'), ('SUPPORT', 'Support'), ('MAINTENANCE', 'Maintenance'), ('SECURITY', 'Security'), ('FOOD_SERVICE', 'Food Service'), ('OTHER', 'Other')], default='ADMINISTRATIVE', max_length=20)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
                ('date_joined', models.DateField(default=django.utils.timezone.now)),
                ('responsibilities', models.TextField(blank=True, null=True)),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to='users.staffmember')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff Member',
                'verbose_name_plural': 'Staff Members',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=20, unique=True)),
                ('pin', models.CharField(max_length=5)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('section', models.CharField(blank=True, max_length=10, null=True)),
                ('additional_info', models.JSONField(blank=True, null=True)),
                ('chat_enabled', models.BooleanField(default=True, help_text='If disabled, student cannot send or receive messages (parental control)')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('GRADUATED', 'Graduated'), ('TRANSFERRED', 'Transferred'), ('WITHDRAWN', 'Withdrawn'), ('SUSPENDED', 'Suspended'), ('ON_LEAVE', 'On Leave')], default='ACTIVE', help_text='Current enrollment status of the student', max_length=15)),
                ('is_repeating', models.BooleanField(default=False, help_text='If True, student will repeat the current grade in the next academic year')),
                ('years_in_current_grade', models.PositiveSmallIntegerField(default=1, help_text='Number of years student has spent in the current grade')),
                ('last_promoted_date', models.DateField(blank=True, help_text='Date when student was last promoted to a new grade', null=True)),
                ('grade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grade_students', to='courses.classroom')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('student_id', 'pin')},
            },
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('relationship', models.CharField(default='Parent', max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='parent_profile', to=settings.AUTH_USER_MODEL)),
                ('children', models.ManyToManyField(related_name='parents', to='users.student')),
            ],
        ),
        migrations.CreateModel(
            name='AdmissionLetter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_number', models.CharField(max_length=50, unique=True)),
                ('admission_date', models.DateField()),
                ('academic_year', models.CharField(max_length=20)),
                ('grade_admitted', models.CharField(max_length=20)),
                ('section_admitted', models.CharField(blank=True, max_length=20, null=True)),
                ('fee_details', models.TextField(blank=True, null=True)),
                ('additional_info', models.JSONField(blank=True, null=True)),
                ('is_printed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.admissionlettertemplate')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admission_letters', to='users.student')),
            ],
            options={
                'verbose_name': 'Admission Letter',
                'verbose_name_plural': 'Admission Letters',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('qualification', models.CharField(blank=True, max_length=255, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('grade', models.CharField(max_length=50)),
                ('section', models.CharField(max_length=10)),
                ('students', models.ManyToManyField(blank=True, related_name='classrooms', to='users.student')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_classrooms', to='users.teacher')),
            ],
            options={
                'verbose_name': 'Classroom',
                'verbose_name_plural': 'Classrooms',
            },
        ),
    ]
